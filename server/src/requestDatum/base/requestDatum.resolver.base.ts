/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRequestDatumArgs } from "./CreateRequestDatumArgs";
import { UpdateRequestDatumArgs } from "./UpdateRequestDatumArgs";
import { DeleteRequestDatumArgs } from "./DeleteRequestDatumArgs";
import { RequestDatumFindManyArgs } from "./RequestDatumFindManyArgs";
import { RequestDatumFindUniqueArgs } from "./RequestDatumFindUniqueArgs";
import { RequestDatum } from "./RequestDatum";
import { User } from "../../user/base/User";
import { Category } from "../../category/base/Category";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { LinkDatum } from "../../linkDatum/base/LinkDatum";
import { EnumRequestDatum } from "../../enumRequestDatum/base/EnumRequestDatum";
import { RequestDatumService } from "../requestDatum.service";

@graphql.Resolver(() => RequestDatum)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RequestDatumResolverBase {
  constructor(
    protected readonly service: RequestDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  async _requestDataMeta(
    @graphql.Args() args: RequestDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RequestDatum])
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  async requestData(
    @graphql.Args() args: RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RequestDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "own",
  })
  async requestDatum(
    @graphql.Args() args: RequestDatumFindUniqueArgs
  ): Promise<RequestDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RequestDatum)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "create",
    possession: "any",
  })
  async createRequestDatum(
    @graphql.Args() args: CreateRequestDatumArgs
  ): Promise<RequestDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        askId: args.data.askId
          ? {
              connect: args.data.askId,
            }
          : undefined,

        categoryRequestId: args.data.categoryRequestId
          ? {
              connect: args.data.categoryRequestId,
            }
          : undefined,

        fileId: args.data.fileId
          ? {
              connect: args.data.fileId,
            }
          : undefined,

        linkId: args.data.linkId
          ? {
              connect: args.data.linkId,
            }
          : undefined,

        recipientId: args.data.recipientId
          ? {
              connect: args.data.recipientId,
            }
          : undefined,

        statusId: args.data.statusId
          ? {
              connect: args.data.statusId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RequestDatum)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "update",
    possession: "any",
  })
  async updateRequestDatum(
    @graphql.Args() args: UpdateRequestDatumArgs
  ): Promise<RequestDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          askId: args.data.askId
            ? {
                connect: args.data.askId,
              }
            : undefined,

          categoryRequestId: args.data.categoryRequestId
            ? {
                connect: args.data.categoryRequestId,
              }
            : undefined,

          fileId: args.data.fileId
            ? {
                connect: args.data.fileId,
              }
            : undefined,

          linkId: args.data.linkId
            ? {
                connect: args.data.linkId,
              }
            : undefined,

          recipientId: args.data.recipientId
            ? {
                connect: args.data.recipientId,
              }
            : undefined,

          statusId: args.data.statusId
            ? {
                connect: args.data.statusId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RequestDatum)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "delete",
    possession: "any",
  })
  async deleteRequestDatum(
    @graphql.Args() args: DeleteRequestDatumArgs
  ): Promise<RequestDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async askId(@graphql.Parent() parent: RequestDatum): Promise<User | null> {
    const result = await this.service.getAskId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async categoryRequestId(
    @graphql.Parent() parent: RequestDatum
  ): Promise<Category | null> {
    const result = await this.service.getCategoryRequestId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FileDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async fileId(
    @graphql.Parent() parent: RequestDatum
  ): Promise<FileDatum | null> {
    const result = await this.service.getFileId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => LinkDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LinkDatum",
    action: "read",
    possession: "any",
  })
  async linkId(
    @graphql.Parent() parent: RequestDatum
  ): Promise<LinkDatum | null> {
    const result = await this.service.getLinkId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async recipientId(
    @graphql.Parent() parent: RequestDatum
  ): Promise<User | null> {
    const result = await this.service.getRecipientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EnumRequestDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumRequestDatum",
    action: "read",
    possession: "any",
  })
  async statusId(
    @graphql.Parent() parent: RequestDatum
  ): Promise<EnumRequestDatum | null> {
    const result = await this.service.getStatusId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
