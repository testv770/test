/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { User } from "../../user/base/User";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { Category } from "../../category/base/Category";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { LinkDatum } from "../../linkDatum/base/LinkDatum";
import { EnumRequestDatum } from "../../enumRequestDatum/base/EnumRequestDatum";
@ObjectType()
class RequestDatum {
  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  askId?: User | null;

  @ApiProperty({
    required: false,
    type: () => Category,
  })
  @ValidateNested()
  @Type(() => Category)
  @IsOptional()
  categoryRequestId?: Category | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  duration!: Date | null;

  @ApiProperty({
    required: false,
    type: () => FileDatum,
  })
  @ValidateNested()
  @Type(() => FileDatum)
  @IsOptional()
  fileId?: FileDatum | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => LinkDatum,
  })
  @ValidateNested()
  @Type(() => LinkDatum)
  @IsOptional()
  linkId?: LinkDatum | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  recipientId?: User | null;

  @ApiProperty({
    required: false,
    type: () => EnumRequestDatum,
  })
  @ValidateNested()
  @Type(() => EnumRequestDatum)
  @IsOptional()
  statusId?: EnumRequestDatum | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { RequestDatum };
