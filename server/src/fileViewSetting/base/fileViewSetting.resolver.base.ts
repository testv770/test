/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFileViewSettingArgs } from "./CreateFileViewSettingArgs";
import { UpdateFileViewSettingArgs } from "./UpdateFileViewSettingArgs";
import { DeleteFileViewSettingArgs } from "./DeleteFileViewSettingArgs";
import { FileViewSettingFindManyArgs } from "./FileViewSettingFindManyArgs";
import { FileViewSettingFindUniqueArgs } from "./FileViewSettingFindUniqueArgs";
import { FileViewSetting } from "./FileViewSetting";
import { EnumFileViewSetting } from "../../enumFileViewSetting/base/EnumFileViewSetting";
import { User } from "../../user/base/User";
import { FileViewSettingService } from "../fileViewSetting.service";

@graphql.Resolver(() => FileViewSetting)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FileViewSettingResolverBase {
  constructor(
    protected readonly service: FileViewSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "any",
  })
  async _fileViewSettingsMeta(
    @graphql.Args() args: FileViewSettingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FileViewSetting])
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "any",
  })
  async fileViewSettings(
    @graphql.Args() args: FileViewSettingFindManyArgs
  ): Promise<FileViewSetting[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FileViewSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "own",
  })
  async fileViewSetting(
    @graphql.Args() args: FileViewSettingFindUniqueArgs
  ): Promise<FileViewSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "create",
    possession: "any",
  })
  async createFileViewSetting(
    @graphql.Args() args: CreateFileViewSettingArgs
  ): Promise<FileViewSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        generalSettingId: args.data.generalSettingId
          ? {
              connect: args.data.generalSettingId,
            }
          : undefined,

        identity: args.data.identity
          ? {
              connect: args.data.identity,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "update",
    possession: "any",
  })
  async updateFileViewSetting(
    @graphql.Args() args: UpdateFileViewSettingArgs
  ): Promise<FileViewSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          generalSettingId: args.data.generalSettingId
            ? {
                connect: args.data.generalSettingId,
              }
            : undefined,

          identity: args.data.identity
            ? {
                connect: args.data.identity,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "delete",
    possession: "any",
  })
  async deleteFileViewSetting(
    @graphql.Args() args: DeleteFileViewSettingArgs
  ): Promise<FileViewSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EnumFileViewSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "read",
    possession: "any",
  })
  async generalSettingId(
    @graphql.Parent() parent: FileViewSetting
  ): Promise<EnumFileViewSetting | null> {
    const result = await this.service.getGeneralSettingId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async identity(
    @graphql.Parent() parent: FileViewSetting
  ): Promise<User | null> {
    const result = await this.service.getIdentity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
