/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { AuditFindManyArgs } from "../../audit/base/AuditFindManyArgs";
import { Audit } from "../../audit/base/Audit";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { FileDatumFindManyArgs } from "../../fileDatum/base/FileDatumFindManyArgs";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { FileViewSettingFindManyArgs } from "../../fileViewSetting/base/FileViewSettingFindManyArgs";
import { FileViewSetting } from "../../fileViewSetting/base/FileViewSetting";
import { FileViewFindManyArgs } from "../../fileView/base/FileViewFindManyArgs";
import { FileView } from "../../fileView/base/FileView";
import { GroupMemberFindManyArgs } from "../../groupMember/base/GroupMemberFindManyArgs";
import { GroupMember } from "../../groupMember/base/GroupMember";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { HashtagFindManyArgs } from "../../hashtag/base/HashtagFindManyArgs";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { LinkDatumFindManyArgs } from "../../linkDatum/base/LinkDatumFindManyArgs";
import { LinkDatum } from "../../linkDatum/base/LinkDatum";
import { NetworkPostFindManyArgs } from "../../networkPost/base/NetworkPostFindManyArgs";
import { NetworkPost } from "../../networkPost/base/NetworkPost";
import { PermissionGroupNameFindManyArgs } from "../../permissionGroupName/base/PermissionGroupNameFindManyArgs";
import { PermissionGroupName } from "../../permissionGroupName/base/PermissionGroupName";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { RequestDatumFindManyArgs } from "../../requestDatum/base/RequestDatumFindManyArgs";
import { RequestDatum } from "../../requestDatum/base/RequestDatum";
import { ShareIdentityFindManyArgs } from "../../shareIdentity/base/ShareIdentityFindManyArgs";
import { ShareIdentity } from "../../shareIdentity/base/ShareIdentity";
import { SharingUnregisteredUserFindManyArgs } from "../../sharingUnregisteredUser/base/SharingUnregisteredUserFindManyArgs";
import { SharingUnregisteredUser } from "../../sharingUnregisteredUser/base/SharingUnregisteredUser";
import { SuggestionDatumFindManyArgs } from "../../suggestionDatum/base/SuggestionDatumFindManyArgs";
import { SuggestionDatum } from "../../suggestionDatum/base/SuggestionDatum";
import { TemplateFindManyArgs } from "../../template/base/TemplateFindManyArgs";
import { Template } from "../../template/base/Template";
import { UserFcmFindManyArgs } from "../../userFcm/base/UserFcmFindManyArgs";
import { UserFcm } from "../../userFcm/base/UserFcm";
import { UserLocationFindManyArgs } from "../../userLocation/base/UserLocationFindManyArgs";
import { UserLocation } from "../../userLocation/base/UserLocation";
import { EnumUserBlock } from "../../enumUserBlock/base/EnumUserBlock";
import { UserService } from "../user.service";

@graphql.Resolver(() => User)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserResolverBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async _usersMeta(
    @graphql.Args() args: UserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        isBlock: args.data.isBlock
          ? {
              connect: args.data.isBlock,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          isBlock: args.data.isBlock
            ? {
                connect: args.data.isBlock,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Audit])
  @nestAccessControl.UseRoles({
    resource: "Audit",
    action: "read",
    possession: "any",
  })
  async audits(
    @graphql.Parent() parent: User,
    @graphql.Args() args: AuditFindManyArgs
  ): Promise<Audit[]> {
    const results = await this.service.findAudits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contact])
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async contactsContactId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ContactFindManyArgs
  ): Promise<Contact[]> {
    const results = await this.service.findContactsContactId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contact])
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async contactsIdentityId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ContactFindManyArgs
  ): Promise<Contact[]> {
    const results = await this.service.findContactsIdentityId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileDatum])
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async fileData(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FileDatumFindManyArgs
  ): Promise<FileDatum[]> {
    const results = await this.service.findFileData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileViewSetting])
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "any",
  })
  async fileViewSettings(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FileViewSettingFindManyArgs
  ): Promise<FileViewSetting[]> {
    const results = await this.service.findFileViewSettings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileView])
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  async fileViewsIdentity(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FileViewFindManyArgs
  ): Promise<FileView[]> {
    const results = await this.service.findFileViewsIdentity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileView])
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  async fileViewsWatchId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FileViewFindManyArgs
  ): Promise<FileView[]> {
    const results = await this.service.findFileViewsWatchId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GroupMember])
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  async groupMembers(
    @graphql.Parent() parent: User,
    @graphql.Args() args: GroupMemberFindManyArgs
  ): Promise<GroupMember[]> {
    const results = await this.service.findGroupMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Group])
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groups(
    @graphql.Parent() parent: User,
    @graphql.Args() args: GroupFindManyArgs
  ): Promise<Group[]> {
    const results = await this.service.findGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Hashtag])
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async hashtags(
    @graphql.Parent() parent: User,
    @graphql.Args() args: HashtagFindManyArgs
  ): Promise<Hashtag[]> {
    const results = await this.service.findHashtags(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LinkDatum])
  @nestAccessControl.UseRoles({
    resource: "LinkDatum",
    action: "read",
    possession: "any",
  })
  async linkData(
    @graphql.Parent() parent: User,
    @graphql.Args() args: LinkDatumFindManyArgs
  ): Promise<LinkDatum[]> {
    const results = await this.service.findLinkData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [NetworkPost])
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "read",
    possession: "any",
  })
  async networkPosts(
    @graphql.Parent() parent: User,
    @graphql.Args() args: NetworkPostFindManyArgs
  ): Promise<NetworkPost[]> {
    const results = await this.service.findNetworkPosts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PermissionGroupName])
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "any",
  })
  async permissionGroupNames(
    @graphql.Parent() parent: User,
    @graphql.Args() args: PermissionGroupNameFindManyArgs
  ): Promise<PermissionGroupName[]> {
    const results = await this.service.findPermissionGroupNames(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Profile])
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  async profiles(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ProfileFindManyArgs
  ): Promise<Profile[]> {
    const results = await this.service.findProfiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RequestDatum])
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  async requestDataAdkIdAdkId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    const results = await this.service.findRequestDataAdkIdAdkId(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RequestDatum])
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  async requestDataRecipientId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    const results = await this.service.findRequestDataRecipientId(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ShareIdentity])
  @nestAccessControl.UseRoles({
    resource: "ShareIdentity",
    action: "read",
    possession: "any",
  })
  async shareIdentities(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ShareIdentityFindManyArgs
  ): Promise<ShareIdentity[]> {
    const results = await this.service.findShareIdentities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SharingUnregisteredUser])
  @nestAccessControl.UseRoles({
    resource: "SharingUnregisteredUser",
    action: "read",
    possession: "any",
  })
  async sharingUnregisteredUsers(
    @graphql.Parent() parent: User,
    @graphql.Args() args: SharingUnregisteredUserFindManyArgs
  ): Promise<SharingUnregisteredUser[]> {
    const results = await this.service.findSharingUnregisteredUsers(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SuggestionDatum])
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  async suggestionDataRecipientId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    const results = await this.service.findSuggestionDataRecipientId(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SuggestionDatum])
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  async suggestionDataSuggestionId(
    @graphql.Parent() parent: User,
    @graphql.Args() args: SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    const results = await this.service.findSuggestionDataSuggestionId(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Template])
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async templates(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TemplateFindManyArgs
  ): Promise<Template[]> {
    const results = await this.service.findTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFcm])
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "read",
    possession: "any",
  })
  async userFcms(
    @graphql.Parent() parent: User,
    @graphql.Args() args: UserFcmFindManyArgs
  ): Promise<UserFcm[]> {
    const results = await this.service.findUserFcms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserLocation])
  @nestAccessControl.UseRoles({
    resource: "UserLocation",
    action: "read",
    possession: "any",
  })
  async userLocations(
    @graphql.Parent() parent: User,
    @graphql.Args() args: UserLocationFindManyArgs
  ): Promise<UserLocation[]> {
    const results = await this.service.findUserLocations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EnumUserBlock, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "read",
    possession: "any",
  })
  async isBlock(@graphql.Parent() parent: User): Promise<EnumUserBlock | null> {
    const result = await this.service.getIsBlock(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
