/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";

import {
  Prisma,
  User,
  Audit,
  Contact,
  FileDatum,
  FileViewSetting,
  FileView,
  GroupMember,
  Group,
  Hashtag,
  LinkDatum,
  NetworkPost,
  PermissionGroupName,
  Profile,
  RequestDatum,
  ShareIdentity,
  SharingUnregisteredUser,
  SuggestionDatum,
  Template,
  UserFcm,
  UserLocation,
  EnumUserBlock,
} from "@prisma/client";

import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<number> {
    return this.prisma.user.count(args);
  }

  async findMany<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<User[]> {
    return this.prisma.user.findMany(args);
  }
  async findOne<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<User | null> {
    return this.prisma.user.findUnique(args);
  }
  async create<T extends Prisma.UserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
  ): Promise<User> {
    return this.prisma.user.create<T>({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async update<T extends Prisma.UserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
  ): Promise<User> {
    return this.prisma.user.update<T>({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async delete<T extends Prisma.UserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
  ): Promise<User> {
    return this.prisma.user.delete(args);
  }

  async findAudits(
    parentId: string,
    args: Prisma.AuditFindManyArgs
  ): Promise<Audit[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .audits(args);
  }

  async findContactsContactId(
    parentId: string,
    args: Prisma.ContactFindManyArgs
  ): Promise<Contact[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .contactsContactId(args);
  }

  async findContactsIdentityId(
    parentId: string,
    args: Prisma.ContactFindManyArgs
  ): Promise<Contact[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .contactsIdentityId(args);
  }

  async findFileData(
    parentId: string,
    args: Prisma.FileDatumFindManyArgs
  ): Promise<FileDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .fileData(args);
  }

  async findFileViewSettings(
    parentId: string,
    args: Prisma.FileViewSettingFindManyArgs
  ): Promise<FileViewSetting[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .fileViewSettings(args);
  }

  async findFileViewsIdentity(
    parentId: string,
    args: Prisma.FileViewFindManyArgs
  ): Promise<FileView[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .fileViews_identity(args);
  }

  async findFileViewsWatchId(
    parentId: string,
    args: Prisma.FileViewFindManyArgs
  ): Promise<FileView[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .fileViews_watchId(args);
  }

  async findGroupMembers(
    parentId: string,
    args: Prisma.GroupMemberFindManyArgs
  ): Promise<GroupMember[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .groupMembers(args);
  }

  async findGroups(
    parentId: string,
    args: Prisma.GroupFindManyArgs
  ): Promise<Group[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .groups(args);
  }

  async findHashtags(
    parentId: string,
    args: Prisma.HashtagFindManyArgs
  ): Promise<Hashtag[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .hashtags(args);
  }

  async findLinkData(
    parentId: string,
    args: Prisma.LinkDatumFindManyArgs
  ): Promise<LinkDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .linkData(args);
  }

  async findNetworkPosts(
    parentId: string,
    args: Prisma.NetworkPostFindManyArgs
  ): Promise<NetworkPost[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .networkPosts(args);
  }

  async findPermissionGroupNames(
    parentId: string,
    args: Prisma.PermissionGroupNameFindManyArgs
  ): Promise<PermissionGroupName[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .permissionGroupNames(args);
  }

  async findProfiles(
    parentId: string,
    args: Prisma.ProfileFindManyArgs
  ): Promise<Profile[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .profiles(args);
  }

  async findRequestDataAdkIdAdkId(
    parentId: string,
    args: Prisma.RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .requestDataAdkId_adkId(args);
  }

  async findRequestDataRecipientId(
    parentId: string,
    args: Prisma.RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .requestDataRecipientId(args);
  }

  async findShareIdentities(
    parentId: string,
    args: Prisma.ShareIdentityFindManyArgs
  ): Promise<ShareIdentity[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .shareIdentities(args);
  }

  async findSharingUnregisteredUsers(
    parentId: string,
    args: Prisma.SharingUnregisteredUserFindManyArgs
  ): Promise<SharingUnregisteredUser[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .sharingUnregisteredUsers(args);
  }

  async findSuggestionDataRecipientId(
    parentId: string,
    args: Prisma.SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .suggestionData_recipientId(args);
  }

  async findSuggestionDataSuggestionId(
    parentId: string,
    args: Prisma.SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .suggestionData_suggestionId(args);
  }

  async findTemplates(
    parentId: string,
    args: Prisma.TemplateFindManyArgs
  ): Promise<Template[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .templates(args);
  }

  async findUserFcms(
    parentId: string,
    args: Prisma.UserFcmFindManyArgs
  ): Promise<UserFcm[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .userFcms(args);
  }

  async findUserLocations(
    parentId: string,
    args: Prisma.UserLocationFindManyArgs
  ): Promise<UserLocation[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .userLocations(args);
  }

  async getIsBlock(parentId: string): Promise<EnumUserBlock | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .isBlock();
  }
}
