/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { AuditFindManyArgs } from "../../audit/base/AuditFindManyArgs";
import { Audit } from "../../audit/base/Audit";
import { AuditWhereUniqueInput } from "../../audit/base/AuditWhereUniqueInput";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { FileDatumFindManyArgs } from "../../fileDatum/base/FileDatumFindManyArgs";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { FileDatumWhereUniqueInput } from "../../fileDatum/base/FileDatumWhereUniqueInput";
import { FileViewSettingFindManyArgs } from "../../fileViewSetting/base/FileViewSettingFindManyArgs";
import { FileViewSetting } from "../../fileViewSetting/base/FileViewSetting";
import { FileViewSettingWhereUniqueInput } from "../../fileViewSetting/base/FileViewSettingWhereUniqueInput";
import { FileViewFindManyArgs } from "../../fileView/base/FileViewFindManyArgs";
import { FileView } from "../../fileView/base/FileView";
import { FileViewWhereUniqueInput } from "../../fileView/base/FileViewWhereUniqueInput";
import { GroupMemberFindManyArgs } from "../../groupMember/base/GroupMemberFindManyArgs";
import { GroupMember } from "../../groupMember/base/GroupMember";
import { GroupMemberWhereUniqueInput } from "../../groupMember/base/GroupMemberWhereUniqueInput";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { GroupWhereUniqueInput } from "../../group/base/GroupWhereUniqueInput";
import { HashtagFindManyArgs } from "../../hashtag/base/HashtagFindManyArgs";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { HashtagWhereUniqueInput } from "../../hashtag/base/HashtagWhereUniqueInput";
import { LinkDatumFindManyArgs } from "../../linkDatum/base/LinkDatumFindManyArgs";
import { LinkDatum } from "../../linkDatum/base/LinkDatum";
import { LinkDatumWhereUniqueInput } from "../../linkDatum/base/LinkDatumWhereUniqueInput";
import { NetworkPostFindManyArgs } from "../../networkPost/base/NetworkPostFindManyArgs";
import { NetworkPost } from "../../networkPost/base/NetworkPost";
import { NetworkPostWhereUniqueInput } from "../../networkPost/base/NetworkPostWhereUniqueInput";
import { PermissionGroupNameFindManyArgs } from "../../permissionGroupName/base/PermissionGroupNameFindManyArgs";
import { PermissionGroupName } from "../../permissionGroupName/base/PermissionGroupName";
import { PermissionGroupNameWhereUniqueInput } from "../../permissionGroupName/base/PermissionGroupNameWhereUniqueInput";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { RequestDatumFindManyArgs } from "../../requestDatum/base/RequestDatumFindManyArgs";
import { RequestDatum } from "../../requestDatum/base/RequestDatum";
import { RequestDatumWhereUniqueInput } from "../../requestDatum/base/RequestDatumWhereUniqueInput";
import { ShareIdentityFindManyArgs } from "../../shareIdentity/base/ShareIdentityFindManyArgs";
import { ShareIdentity } from "../../shareIdentity/base/ShareIdentity";
import { ShareIdentityWhereUniqueInput } from "../../shareIdentity/base/ShareIdentityWhereUniqueInput";
import { SharingUnregisteredUserFindManyArgs } from "../../sharingUnregisteredUser/base/SharingUnregisteredUserFindManyArgs";
import { SharingUnregisteredUser } from "../../sharingUnregisteredUser/base/SharingUnregisteredUser";
import { SharingUnregisteredUserWhereUniqueInput } from "../../sharingUnregisteredUser/base/SharingUnregisteredUserWhereUniqueInput";
import { SuggestionDatumFindManyArgs } from "../../suggestionDatum/base/SuggestionDatumFindManyArgs";
import { SuggestionDatum } from "../../suggestionDatum/base/SuggestionDatum";
import { SuggestionDatumWhereUniqueInput } from "../../suggestionDatum/base/SuggestionDatumWhereUniqueInput";
import { TemplateFindManyArgs } from "../../template/base/TemplateFindManyArgs";
import { Template } from "../../template/base/Template";
import { TemplateWhereUniqueInput } from "../../template/base/TemplateWhereUniqueInput";
import { UserFcmFindManyArgs } from "../../userFcm/base/UserFcmFindManyArgs";
import { UserFcm } from "../../userFcm/base/UserFcm";
import { UserFcmWhereUniqueInput } from "../../userFcm/base/UserFcmWhereUniqueInput";
import { UserLocationFindManyArgs } from "../../userLocation/base/UserLocationFindManyArgs";
import { UserLocation } from "../../userLocation/base/UserLocation";
import { UserLocationWhereUniqueInput } from "../../userLocation/base/UserLocationWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: {
        ...data,

        isBlock: data.isBlock
          ? {
              connect: data.isBlock,
            }
          : undefined,
      },
      select: {
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,

        isBlock: {
          select: {
            id: true,
          },
        },

        isRegistered: true,
        keyReadFirebase: true,
        lastName: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,

        isBlock: {
          select: {
            id: true,
          },
        },

        isRegistered: true,
        keyReadFirebase: true,
        lastName: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,

        isBlock: {
          select: {
            id: true,
          },
        },

        isRegistered: true,
        keyReadFirebase: true,
        lastName: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          isBlock: data.isBlock
            ? {
                connect: data.isBlock,
              }
            : undefined,
        },
        select: {
          country: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isActive: true,

          isBlock: {
            select: {
              id: true,
            },
          },

          isRegistered: true,
          keyReadFirebase: true,
          lastName: true,
          phone: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          country: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isActive: true,

          isBlock: {
            select: {
              id: true,
            },
          },

          isRegistered: true,
          keyReadFirebase: true,
          lastName: true,
          phone: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Audit",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/audits")
  @ApiNestedQuery(AuditFindManyArgs)
  async findManyAudits(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Audit[]> {
    const query = plainToClass(AuditFindManyArgs, request.query);
    const results = await this.service.findAudits(params.id, {
      ...query,
      select: {
        additionalInfo: true,
        clientIp: true,
        createdAt: true,
        id: true,
        reqFullUrl: true,
        reqMethod: true,
        reqUrl: true,
        resCode: true,
        resMessage: true,
        title: true,
        updatedAt: true,

        userId: {
          select: {
            id: true,
          },
        },

        userName: true,
        userType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/audits")
  async connectAudits(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audits: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/audits")
  async updateAudits(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audits: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/audits")
  async disconnectAudits(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audits: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/contactsContactId")
  @ApiNestedQuery(ContactFindManyArgs)
  async findManyContactsContactId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Contact[]> {
    const query = plainToClass(ContactFindManyArgs, request.query);
    const results = await this.service.findContactsContactId(params.id, {
      ...query,
      select: {
        birth: true,
        company: true,

        contactId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        firstName: true,
        home: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        lastName: true,
        mobile: true,

        permissionGroupId: {
          select: {
            id: true,
          },
        },

        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/contactsContactId")
  async connectContactsContactId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsContactId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/contactsContactId")
  async updateContactsContactId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsContactId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/contactsContactId")
  async disconnectContactsContactId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsContactId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/contactsIdentityId")
  @ApiNestedQuery(ContactFindManyArgs)
  async findManyContactsIdentityId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Contact[]> {
    const query = plainToClass(ContactFindManyArgs, request.query);
    const results = await this.service.findContactsIdentityId(params.id, {
      ...query,
      select: {
        birth: true,
        company: true,

        contactId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        firstName: true,
        home: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        lastName: true,
        mobile: true,

        permissionGroupId: {
          select: {
            id: true,
          },
        },

        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/contactsIdentityId")
  async connectContactsIdentityId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsIdentityId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/contactsIdentityId")
  async updateContactsIdentityId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsIdentityId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/contactsIdentityId")
  async disconnectContactsIdentityId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactsIdentityId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileData")
  @ApiNestedQuery(FileDatumFindManyArgs)
  async findManyFileData(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FileDatum[]> {
    const query = plainToClass(FileDatumFindManyArgs, request.query);
    const results = await this.service.findFileData(params.id, {
      ...query,
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileData")
  async connectFileData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileData")
  async updateFileData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileData")
  async disconnectFileData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileViewSettings")
  @ApiNestedQuery(FileViewSettingFindManyArgs)
  async findManyFileViewSettings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FileViewSetting[]> {
    const query = plainToClass(FileViewSettingFindManyArgs, request.query);
    const results = await this.service.findFileViewSettings(params.id, {
      ...query,
      select: {
        createdAt: true,

        generalSettingId: {
          select: {
            id: true,
          },
        },

        id: true,

        identity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileViewSettings")
  async connectFileViewSettings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViewSettings: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileViewSettings")
  async updateFileViewSettings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViewSettings: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileViewSettings")
  async disconnectFileViewSettings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViewSettings: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileViews_identity")
  @ApiNestedQuery(FileViewFindManyArgs)
  async findManyFileViewsIdentity(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FileView[]> {
    const query = plainToClass(FileViewFindManyArgs, request.query);
    const results = await this.service.findFileViewsIdentity(params.id, {
      ...query,
      select: {
        createdAt: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        identity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        watchId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileViews_identity")
  async connectFileViewsIdentity(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_identity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileViews_identity")
  async updateFileViewsIdentity(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_identity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileViews_identity")
  async disconnectFileViewsIdentity(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_identity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileViews_watchId")
  @ApiNestedQuery(FileViewFindManyArgs)
  async findManyFileViewsWatchId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FileView[]> {
    const query = plainToClass(FileViewFindManyArgs, request.query);
    const results = await this.service.findFileViewsWatchId(params.id, {
      ...query,
      select: {
        createdAt: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        identity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        watchId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileViews_watchId")
  async connectFileViewsWatchId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_watchId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileViews_watchId")
  async updateFileViewsWatchId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_watchId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileViews_watchId")
  async disconnectFileViewsWatchId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews_watchId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/groupMembers")
  @ApiNestedQuery(GroupMemberFindManyArgs)
  async findManyGroupMembers(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<GroupMember[]> {
    const query = plainToClass(GroupMemberFindManyArgs, request.query);
    const results = await this.service.findGroupMembers(params.id, {
      ...query,
      select: {
        createdAt: true,

        groupId: {
          select: {
            id: true,
          },
        },

        id: true,

        memberId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/groupMembers")
  async connectGroupMembers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/groupMembers")
  async updateGroupMembers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/groupMembers")
  async disconnectGroupMembers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/groups")
  @ApiNestedQuery(GroupFindManyArgs)
  async findManyGroups(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Group[]> {
    const query = plainToClass(GroupFindManyArgs, request.query);
    const results = await this.service.findGroups(params.id, {
      ...query,
      select: {
        createdAt: true,
        groupname: true,
        id: true,
        isDefaultGroup: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/groups")
  async connectGroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/groups")
  async updateGroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/groups")
  async disconnectGroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/hashtags")
  @ApiNestedQuery(HashtagFindManyArgs)
  async findManyHashtags(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Hashtag[]> {
    const query = plainToClass(HashtagFindManyArgs, request.query);
    const results = await this.service.findHashtags(params.id, {
      ...query,
      select: {
        color: true,
        createdAt: true,
        hashtagName: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/hashtags")
  async connectHashtags(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HashtagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtags: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/hashtags")
  async updateHashtags(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HashtagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtags: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/hashtags")
  async disconnectHashtags(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HashtagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtags: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "LinkDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/linkData")
  @ApiNestedQuery(LinkDatumFindManyArgs)
  async findManyLinkData(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<LinkDatum[]> {
    const query = plainToClass(LinkDatumFindManyArgs, request.query);
    const results = await this.service.findLinkData(params.id, {
      ...query,
      select: {
        categoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isPublic: true,
        link: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/linkData")
  async connectLinkData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/linkData")
  async updateLinkData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/linkData")
  async disconnectLinkData(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/networkPosts")
  @ApiNestedQuery(NetworkPostFindManyArgs)
  async findManyNetworkPosts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<NetworkPost[]> {
    const query = plainToClass(NetworkPostFindManyArgs, request.query);
    const results = await this.service.findNetworkPosts(params.id, {
      ...query,
      select: {
        createdAt: true,
        datePublished: true,
        gif: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        networkType: true,
        postId: true,
        postText: true,
        updatedAt: true,
        video: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/networkPosts")
  async connectNetworkPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NetworkPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      networkPosts: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/networkPosts")
  async updateNetworkPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NetworkPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      networkPosts: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/networkPosts")
  async disconnectNetworkPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NetworkPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      networkPosts: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/permissionGroupNames")
  @ApiNestedQuery(PermissionGroupNameFindManyArgs)
  async findManyPermissionGroupNames(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<PermissionGroupName[]> {
    const query = plainToClass(PermissionGroupNameFindManyArgs, request.query);
    const results = await this.service.findPermissionGroupNames(params.id, {
      ...query,
      select: {
        createdAt: true,
        groupName: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        permissionGroupId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/permissionGroupNames")
  async connectPermissionGroupNames(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/permissionGroupNames")
  async updatePermissionGroupNames(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/permissionGroupNames")
  async disconnectPermissionGroupNames(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profiles")
  @ApiNestedQuery(ProfileFindManyArgs)
  async findManyProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Profile[]> {
    const query = plainToClass(ProfileFindManyArgs, request.query);
    const results = await this.service.findProfiles(params.id, {
      ...query,
      select: {
        backgroundImage: true,

        categoryView: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        themeColor: true,
        title: true,
        totalFileWeight: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profiles")
  async connectProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profiles")
  async updateProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profiles")
  async disconnectProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/requestDataAdkId_adkId")
  @ApiNestedQuery(RequestDatumFindManyArgs)
  async findManyRequestDataAdkIdAdkId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<RequestDatum[]> {
    const query = plainToClass(RequestDatumFindManyArgs, request.query);
    const results = await this.service.findRequestDataAdkIdAdkId(params.id, {
      ...query,
      select: {
        askId: {
          select: {
            id: true,
          },
        },

        categoryRequestId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        linkId: {
          select: {
            id: true,
          },
        },

        recipientId: {
          select: {
            id: true,
          },
        },

        statusId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/requestDataAdkId_adkId")
  async connectRequestDataAdkIdAdkId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataAdkId_adkId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/requestDataAdkId_adkId")
  async updateRequestDataAdkIdAdkId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataAdkId_adkId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/requestDataAdkId_adkId")
  async disconnectRequestDataAdkIdAdkId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataAdkId_adkId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/requestDataRecipientId")
  @ApiNestedQuery(RequestDatumFindManyArgs)
  async findManyRequestDataRecipientId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<RequestDatum[]> {
    const query = plainToClass(RequestDatumFindManyArgs, request.query);
    const results = await this.service.findRequestDataRecipientId(params.id, {
      ...query,
      select: {
        askId: {
          select: {
            id: true,
          },
        },

        categoryRequestId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        linkId: {
          select: {
            id: true,
          },
        },

        recipientId: {
          select: {
            id: true,
          },
        },

        statusId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/requestDataRecipientId")
  async connectRequestDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataRecipientId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/requestDataRecipientId")
  async updateRequestDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataRecipientId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/requestDataRecipientId")
  async disconnectRequestDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestDataRecipientId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ShareIdentity",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/shareIdentities")
  @ApiNestedQuery(ShareIdentityFindManyArgs)
  async findManyShareIdentities(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ShareIdentity[]> {
    const query = plainToClass(ShareIdentityFindManyArgs, request.query);
    const results = await this.service.findShareIdentities(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identitySharedId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/shareIdentities")
  async connectShareIdentities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareIdentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareIdentities: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/shareIdentities")
  async updateShareIdentities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareIdentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareIdentities: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/shareIdentities")
  async disconnectShareIdentities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareIdentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareIdentities: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SharingUnregisteredUser",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/sharingUnregisteredUsers")
  @ApiNestedQuery(SharingUnregisteredUserFindManyArgs)
  async findManySharingUnregisteredUsers(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SharingUnregisteredUser[]> {
    const query = plainToClass(
      SharingUnregisteredUserFindManyArgs,
      request.query
    );
    const results = await this.service.findSharingUnregisteredUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        expiration: true,
        id: true,

        sharingId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/sharingUnregisteredUsers")
  async connectSharingUnregisteredUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SharingUnregisteredUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharingUnregisteredUsers: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/sharingUnregisteredUsers")
  async updateSharingUnregisteredUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SharingUnregisteredUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharingUnregisteredUsers: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/sharingUnregisteredUsers")
  async disconnectSharingUnregisteredUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SharingUnregisteredUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharingUnregisteredUsers: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/suggestionData_recipientId")
  @ApiNestedQuery(SuggestionDatumFindManyArgs)
  async findManySuggestionDataRecipientId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SuggestionDatum[]> {
    const query = plainToClass(SuggestionDatumFindManyArgs, request.query);
    const results = await this.service.findSuggestionDataRecipientId(
      params.id,
      {
        ...query,
        select: {
          categorySuggestionId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,

          recipientId: {
            select: {
              id: true,
            },
          },

          statusId: {
            select: {
              id: true,
            },
          },

          suggestionId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/suggestionData_recipientId")
  async connectSuggestionDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_recipientId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/suggestionData_recipientId")
  async updateSuggestionDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_recipientId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/suggestionData_recipientId")
  async disconnectSuggestionDataRecipientId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_recipientId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/suggestionData_suggestionId")
  @ApiNestedQuery(SuggestionDatumFindManyArgs)
  async findManySuggestionDataSuggestionId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SuggestionDatum[]> {
    const query = plainToClass(SuggestionDatumFindManyArgs, request.query);
    const results = await this.service.findSuggestionDataSuggestionId(
      params.id,
      {
        ...query,
        select: {
          categorySuggestionId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,

          recipientId: {
            select: {
              id: true,
            },
          },

          statusId: {
            select: {
              id: true,
            },
          },

          suggestionId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/suggestionData_suggestionId")
  async connectSuggestionDataSuggestionId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_suggestionId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/suggestionData_suggestionId")
  async updateSuggestionDataSuggestionId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_suggestionId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/suggestionData_suggestionId")
  async disconnectSuggestionDataSuggestionId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData_suggestionId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/templates")
  @ApiNestedQuery(TemplateFindManyArgs)
  async findManyTemplates(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Template[]> {
    const query = plainToClass(TemplateFindManyArgs, request.query);
    const results = await this.service.findTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        templateName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/templates")
  async connectTemplates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/templates")
  async updateTemplates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/templates")
  async disconnectTemplates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/userFcms")
  @ApiNestedQuery(UserFcmFindManyArgs)
  async findManyUserFcms(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserFcm[]> {
    const query = plainToClass(UserFcmFindManyArgs, request.query);
    const results = await this.service.findUserFcms(params.id, {
      ...query,
      select: {
        createdAt: true,
        fcm: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/userFcms")
  async connectUserFcms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFcmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFcms: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/userFcms")
  async updateUserFcms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFcmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFcms: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/userFcms")
  async disconnectUserFcms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFcmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFcms: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "UserLocation",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/userLocations")
  @ApiNestedQuery(UserLocationFindManyArgs)
  async findManyUserLocations(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserLocation[]> {
    const query = plainToClass(UserLocationFindManyArgs, request.query);
    const results = await this.service.findUserLocations(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        isPublicLocation: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/userLocations")
  async connectUserLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLocations: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/userLocations")
  async updateUserLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLocations: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/userLocations")
  async disconnectUserLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLocations: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
