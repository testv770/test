/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AuditCreateNestedManyWithoutUsersInput } from "./AuditCreateNestedManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { ContactCreateNestedManyWithoutUsersInput } from "./ContactCreateNestedManyWithoutUsersInput";
import { FileDatumCreateNestedManyWithoutUsersInput } from "./FileDatumCreateNestedManyWithoutUsersInput";
import { FileViewSettingCreateNestedManyWithoutUsersInput } from "./FileViewSettingCreateNestedManyWithoutUsersInput";
import { FileViewCreateNestedManyWithoutUsersInput } from "./FileViewCreateNestedManyWithoutUsersInput";
import { GroupMemberCreateNestedManyWithoutUsersInput } from "./GroupMemberCreateNestedManyWithoutUsersInput";
import { GroupCreateNestedManyWithoutUsersInput } from "./GroupCreateNestedManyWithoutUsersInput";
import { HashtagCreateNestedManyWithoutUsersInput } from "./HashtagCreateNestedManyWithoutUsersInput";
import { EnumUserBlockWhereUniqueInput } from "../../enumUserBlock/base/EnumUserBlockWhereUniqueInput";
import { LinkDatumCreateNestedManyWithoutUsersInput } from "./LinkDatumCreateNestedManyWithoutUsersInput";
import { NetworkPostCreateNestedManyWithoutUsersInput } from "./NetworkPostCreateNestedManyWithoutUsersInput";
import { PermissionGroupNameCreateNestedManyWithoutUsersInput } from "./PermissionGroupNameCreateNestedManyWithoutUsersInput";
import { ProfileCreateNestedManyWithoutUsersInput } from "./ProfileCreateNestedManyWithoutUsersInput";
import { RequestDatumCreateNestedManyWithoutUsersInput } from "./RequestDatumCreateNestedManyWithoutUsersInput";
import { ShareIdentityCreateNestedManyWithoutUsersInput } from "./ShareIdentityCreateNestedManyWithoutUsersInput";
import { SharingUnregisteredUserCreateNestedManyWithoutUsersInput } from "./SharingUnregisteredUserCreateNestedManyWithoutUsersInput";
import { SuggestionDatumCreateNestedManyWithoutUsersInput } from "./SuggestionDatumCreateNestedManyWithoutUsersInput";
import { TemplateCreateNestedManyWithoutUsersInput } from "./TemplateCreateNestedManyWithoutUsersInput";
import { UserFcmCreateNestedManyWithoutUsersInput } from "./UserFcmCreateNestedManyWithoutUsersInput";
import { UserLocationCreateNestedManyWithoutUsersInput } from "./UserLocationCreateNestedManyWithoutUsersInput";
@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: () => AuditCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AuditCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AuditCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  audits?: AuditCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ContactCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ContactCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ContactCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  contactsContactId?: ContactCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ContactCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ContactCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ContactCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  contactsIdentityId?: ContactCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  country?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: () => FileDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FileDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FileDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  fileData?: FileDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => FileViewSettingCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FileViewSettingCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FileViewSettingCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  fileViewSettings?: FileViewSettingCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => FileViewCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FileViewCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FileViewCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  fileViews_identity?: FileViewCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => FileViewCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FileViewCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FileViewCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  fileViews_watchId?: FileViewCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => GroupMemberCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => GroupMemberCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => GroupMemberCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  groupMembers?: GroupMemberCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => GroupCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => GroupCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => GroupCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  groups?: GroupCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => HashtagCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => HashtagCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => HashtagCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  hashtags?: HashtagCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => EnumUserBlockWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EnumUserBlockWhereUniqueInput)
  @IsOptional()
  @Field(() => EnumUserBlockWhereUniqueInput, {
    nullable: true,
  })
  isBlock?: EnumUserBlockWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isRegistered?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  keyReadFirebase?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => LinkDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LinkDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LinkDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  linkData?: LinkDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => NetworkPostCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NetworkPostCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NetworkPostCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  networkPosts?: NetworkPostCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: () => PermissionGroupNameCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PermissionGroupNameCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PermissionGroupNameCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  permissionGroupNames?: PermissionGroupNameCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  phone!: string;

  @ApiProperty({
    required: false,
    type: () => ProfileCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ProfileCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ProfileCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  profiles?: ProfileCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => RequestDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => RequestDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => RequestDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  requestDataAdkId_adkId?: RequestDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => RequestDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => RequestDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => RequestDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  requestDataRecipientId?: RequestDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: [String],
  })
  @IsString({
    each: true,
  })
  @Field(() => [String])
  roles!: Array<string>;

  @ApiProperty({
    required: false,
    type: () => ShareIdentityCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ShareIdentityCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ShareIdentityCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  shareIdentities?: ShareIdentityCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SharingUnregisteredUserCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SharingUnregisteredUserCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SharingUnregisteredUserCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  sharingUnregisteredUsers?: SharingUnregisteredUserCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SuggestionDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SuggestionDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SuggestionDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  suggestionData_recipientId?: SuggestionDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SuggestionDatumCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SuggestionDatumCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SuggestionDatumCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  suggestionData_suggestionId?: SuggestionDatumCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TemplateCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TemplateCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TemplateCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  templates?: TemplateCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserFcmCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserFcmCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserFcmCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  userFcms?: UserFcmCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserLocationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserLocationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserLocationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  userLocations?: UserLocationCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}
export { UserCreateInput };
