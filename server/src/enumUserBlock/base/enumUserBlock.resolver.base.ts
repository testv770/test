/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEnumUserBlockArgs } from "./CreateEnumUserBlockArgs";
import { UpdateEnumUserBlockArgs } from "./UpdateEnumUserBlockArgs";
import { DeleteEnumUserBlockArgs } from "./DeleteEnumUserBlockArgs";
import { EnumUserBlockFindManyArgs } from "./EnumUserBlockFindManyArgs";
import { EnumUserBlockFindUniqueArgs } from "./EnumUserBlockFindUniqueArgs";
import { EnumUserBlock } from "./EnumUserBlock";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { EnumUserBlockService } from "../enumUserBlock.service";

@graphql.Resolver(() => EnumUserBlock)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EnumUserBlockResolverBase {
  constructor(
    protected readonly service: EnumUserBlockService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "read",
    possession: "any",
  })
  async _enumUserBlocksMeta(
    @graphql.Args() args: EnumUserBlockFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EnumUserBlock])
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "read",
    possession: "any",
  })
  async enumUserBlocks(
    @graphql.Args() args: EnumUserBlockFindManyArgs
  ): Promise<EnumUserBlock[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EnumUserBlock, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "read",
    possession: "own",
  })
  async enumUserBlock(
    @graphql.Args() args: EnumUserBlockFindUniqueArgs
  ): Promise<EnumUserBlock | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumUserBlock)
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "create",
    possession: "any",
  })
  async createEnumUserBlock(
    @graphql.Args() args: CreateEnumUserBlockArgs
  ): Promise<EnumUserBlock> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumUserBlock)
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "update",
    possession: "any",
  })
  async updateEnumUserBlock(
    @graphql.Args() args: UpdateEnumUserBlockArgs
  ): Promise<EnumUserBlock | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EnumUserBlock)
  @nestAccessControl.UseRoles({
    resource: "EnumUserBlock",
    action: "delete",
    possession: "any",
  })
  async deleteEnumUserBlock(
    @graphql.Args() args: DeleteEnumUserBlockArgs
  ): Promise<EnumUserBlock | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(
    @graphql.Parent() parent: EnumUserBlock,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
