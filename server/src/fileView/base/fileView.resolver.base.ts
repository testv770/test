/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFileViewArgs } from "./CreateFileViewArgs";
import { UpdateFileViewArgs } from "./UpdateFileViewArgs";
import { DeleteFileViewArgs } from "./DeleteFileViewArgs";
import { FileViewFindManyArgs } from "./FileViewFindManyArgs";
import { FileViewFindUniqueArgs } from "./FileViewFindUniqueArgs";
import { FileView } from "./FileView";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { User } from "../../user/base/User";
import { FileViewService } from "../fileView.service";

@graphql.Resolver(() => FileView)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FileViewResolverBase {
  constructor(
    protected readonly service: FileViewService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  async _fileViewsMeta(
    @graphql.Args() args: FileViewFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FileView])
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  async fileViews(
    @graphql.Args() args: FileViewFindManyArgs
  ): Promise<FileView[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FileView, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "own",
  })
  async fileView(
    @graphql.Args() args: FileViewFindUniqueArgs
  ): Promise<FileView | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileView)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "create",
    possession: "any",
  })
  async createFileView(
    @graphql.Args() args: CreateFileViewArgs
  ): Promise<FileView> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        fileId: args.data.fileId
          ? {
              connect: args.data.fileId,
            }
          : undefined,

        identity: args.data.identity
          ? {
              connect: args.data.identity,
            }
          : undefined,

        watchId: args.data.watchId
          ? {
              connect: args.data.watchId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileView)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "update",
    possession: "any",
  })
  async updateFileView(
    @graphql.Args() args: UpdateFileViewArgs
  ): Promise<FileView | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          fileId: args.data.fileId
            ? {
                connect: args.data.fileId,
              }
            : undefined,

          identity: args.data.identity
            ? {
                connect: args.data.identity,
              }
            : undefined,

          watchId: args.data.watchId
            ? {
                connect: args.data.watchId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileView)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "delete",
    possession: "any",
  })
  async deleteFileView(
    @graphql.Args() args: DeleteFileViewArgs
  ): Promise<FileView | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FileDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async fileId(@graphql.Parent() parent: FileView): Promise<FileDatum | null> {
    const result = await this.service.getFileId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async identity(@graphql.Parent() parent: FileView): Promise<User | null> {
    const result = await this.service.getIdentity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async watchId(@graphql.Parent() parent: FileView): Promise<User | null> {
    const result = await this.service.getWatchId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
