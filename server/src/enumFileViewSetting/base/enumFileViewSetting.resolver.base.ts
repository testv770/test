/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEnumFileViewSettingArgs } from "./CreateEnumFileViewSettingArgs";
import { UpdateEnumFileViewSettingArgs } from "./UpdateEnumFileViewSettingArgs";
import { DeleteEnumFileViewSettingArgs } from "./DeleteEnumFileViewSettingArgs";
import { EnumFileViewSettingFindManyArgs } from "./EnumFileViewSettingFindManyArgs";
import { EnumFileViewSettingFindUniqueArgs } from "./EnumFileViewSettingFindUniqueArgs";
import { EnumFileViewSetting } from "./EnumFileViewSetting";
import { FileViewSettingFindManyArgs } from "../../fileViewSetting/base/FileViewSettingFindManyArgs";
import { FileViewSetting } from "../../fileViewSetting/base/FileViewSetting";
import { EnumFileViewSettingService } from "../enumFileViewSetting.service";

@graphql.Resolver(() => EnumFileViewSetting)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EnumFileViewSettingResolverBase {
  constructor(
    protected readonly service: EnumFileViewSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "read",
    possession: "any",
  })
  async _enumFileViewSettingsMeta(
    @graphql.Args() args: EnumFileViewSettingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EnumFileViewSetting])
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "read",
    possession: "any",
  })
  async enumFileViewSettings(
    @graphql.Args() args: EnumFileViewSettingFindManyArgs
  ): Promise<EnumFileViewSetting[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EnumFileViewSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "read",
    possession: "own",
  })
  async enumFileViewSetting(
    @graphql.Args() args: EnumFileViewSettingFindUniqueArgs
  ): Promise<EnumFileViewSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumFileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "create",
    possession: "any",
  })
  async createEnumFileViewSetting(
    @graphql.Args() args: CreateEnumFileViewSettingArgs
  ): Promise<EnumFileViewSetting> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumFileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "update",
    possession: "any",
  })
  async updateEnumFileViewSetting(
    @graphql.Args() args: UpdateEnumFileViewSettingArgs
  ): Promise<EnumFileViewSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EnumFileViewSetting)
  @nestAccessControl.UseRoles({
    resource: "EnumFileViewSetting",
    action: "delete",
    possession: "any",
  })
  async deleteEnumFileViewSetting(
    @graphql.Args() args: DeleteEnumFileViewSettingArgs
  ): Promise<EnumFileViewSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileViewSetting])
  @nestAccessControl.UseRoles({
    resource: "FileViewSetting",
    action: "read",
    possession: "any",
  })
  async fileViewSettings(
    @graphql.Parent() parent: EnumFileViewSetting,
    @graphql.Args() args: FileViewSettingFindManyArgs
  ): Promise<FileViewSetting[]> {
    const results = await this.service.findFileViewSettings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
