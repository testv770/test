/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGroupTemplateArgs } from "./CreateGroupTemplateArgs";
import { UpdateGroupTemplateArgs } from "./UpdateGroupTemplateArgs";
import { DeleteGroupTemplateArgs } from "./DeleteGroupTemplateArgs";
import { GroupTemplateFindManyArgs } from "./GroupTemplateFindManyArgs";
import { GroupTemplateFindUniqueArgs } from "./GroupTemplateFindUniqueArgs";
import { GroupTemplate } from "./GroupTemplate";
import { Group } from "../../group/base/Group";
import { Template } from "../../template/base/Template";
import { GroupTemplateService } from "../groupTemplate.service";

@graphql.Resolver(() => GroupTemplate)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GroupTemplateResolverBase {
  constructor(
    protected readonly service: GroupTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "read",
    possession: "any",
  })
  async _groupTemplatesMeta(
    @graphql.Args() args: GroupTemplateFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GroupTemplate])
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "read",
    possession: "any",
  })
  async groupTemplates(
    @graphql.Args() args: GroupTemplateFindManyArgs
  ): Promise<GroupTemplate[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GroupTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "read",
    possession: "own",
  })
  async groupTemplate(
    @graphql.Args() args: GroupTemplateFindUniqueArgs
  ): Promise<GroupTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupTemplate)
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "create",
    possession: "any",
  })
  async createGroupTemplate(
    @graphql.Args() args: CreateGroupTemplateArgs
  ): Promise<GroupTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        groupId: args.data.groupId
          ? {
              connect: args.data.groupId,
            }
          : undefined,

        templateId: args.data.templateId
          ? {
              connect: args.data.templateId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupTemplate)
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "update",
    possession: "any",
  })
  async updateGroupTemplate(
    @graphql.Args() args: UpdateGroupTemplateArgs
  ): Promise<GroupTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          groupId: args.data.groupId
            ? {
                connect: args.data.groupId,
              }
            : undefined,

          templateId: args.data.templateId
            ? {
                connect: args.data.templateId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupTemplate)
  @nestAccessControl.UseRoles({
    resource: "GroupTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteGroupTemplate(
    @graphql.Args() args: DeleteGroupTemplateArgs
  ): Promise<GroupTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groupId(
    @graphql.Parent() parent: GroupTemplate
  ): Promise<Group | null> {
    const result = await this.service.getGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Template, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async templateId(
    @graphql.Parent() parent: GroupTemplate
  ): Promise<Template | null> {
    const result = await this.service.getTemplateId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
