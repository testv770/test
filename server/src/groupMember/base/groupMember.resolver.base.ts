/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGroupMemberArgs } from "./CreateGroupMemberArgs";
import { UpdateGroupMemberArgs } from "./UpdateGroupMemberArgs";
import { DeleteGroupMemberArgs } from "./DeleteGroupMemberArgs";
import { GroupMemberFindManyArgs } from "./GroupMemberFindManyArgs";
import { GroupMemberFindUniqueArgs } from "./GroupMemberFindUniqueArgs";
import { GroupMember } from "./GroupMember";
import { Group } from "../../group/base/Group";
import { User } from "../../user/base/User";
import { GroupMemberService } from "../groupMember.service";

@graphql.Resolver(() => GroupMember)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GroupMemberResolverBase {
  constructor(
    protected readonly service: GroupMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  async _groupMembersMeta(
    @graphql.Args() args: GroupMemberFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GroupMember])
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  async groupMembers(
    @graphql.Args() args: GroupMemberFindManyArgs
  ): Promise<GroupMember[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GroupMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "own",
  })
  async groupMember(
    @graphql.Args() args: GroupMemberFindUniqueArgs
  ): Promise<GroupMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "create",
    possession: "any",
  })
  async createGroupMember(
    @graphql.Args() args: CreateGroupMemberArgs
  ): Promise<GroupMember> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        groupId: args.data.groupId
          ? {
              connect: args.data.groupId,
            }
          : undefined,

        memberId: args.data.memberId
          ? {
              connect: args.data.memberId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "update",
    possession: "any",
  })
  async updateGroupMember(
    @graphql.Args() args: UpdateGroupMemberArgs
  ): Promise<GroupMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          groupId: args.data.groupId
            ? {
                connect: args.data.groupId,
              }
            : undefined,

          memberId: args.data.memberId
            ? {
                connect: args.data.memberId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "delete",
    possession: "any",
  })
  async deleteGroupMember(
    @graphql.Args() args: DeleteGroupMemberArgs
  ): Promise<GroupMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groupId(@graphql.Parent() parent: GroupMember): Promise<Group | null> {
    const result = await this.service.getGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async memberId(@graphql.Parent() parent: GroupMember): Promise<User | null> {
    const result = await this.service.getMemberId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
