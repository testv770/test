/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PermissionGroupService } from "../permissionGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PermissionGroupCreateInput } from "./PermissionGroupCreateInput";
import { PermissionGroupWhereInput } from "./PermissionGroupWhereInput";
import { PermissionGroupWhereUniqueInput } from "./PermissionGroupWhereUniqueInput";
import { PermissionGroupFindManyArgs } from "./PermissionGroupFindManyArgs";
import { PermissionGroupUpdateInput } from "./PermissionGroupUpdateInput";
import { PermissionGroup } from "./PermissionGroup";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { FileDatumFindManyArgs } from "../../fileDatum/base/FileDatumFindManyArgs";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { FileDatumWhereUniqueInput } from "../../fileDatum/base/FileDatumWhereUniqueInput";
import { PermissionGroupNameFindManyArgs } from "../../permissionGroupName/base/PermissionGroupNameFindManyArgs";
import { PermissionGroupName } from "../../permissionGroupName/base/PermissionGroupName";
import { PermissionGroupNameWhereUniqueInput } from "../../permissionGroupName/base/PermissionGroupNameWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PermissionGroupControllerBase {
  constructor(
    protected readonly service: PermissionGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PermissionGroup })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: PermissionGroupCreateInput
  ): Promise<PermissionGroup> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        files: true,
        gallery: true,
        groupName: true,
        id: true,
        location: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [PermissionGroup] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(PermissionGroupFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<PermissionGroup[]> {
    const args = plainToClass(PermissionGroupFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        files: true,
        gallery: true,
        groupName: true,
        id: true,
        location: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PermissionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: PermissionGroupWhereUniqueInput
  ): Promise<PermissionGroup | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        files: true,
        gallery: true,
        groupName: true,
        id: true,
        location: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PermissionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() data: PermissionGroupUpdateInput
  ): Promise<PermissionGroup | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          files: true,
          gallery: true,
          groupName: true,
          id: true,
          location: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PermissionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: PermissionGroupWhereUniqueInput
  ): Promise<PermissionGroup | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          files: true,
          gallery: true,
          groupName: true,
          id: true,
          location: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/contacts")
  @ApiNestedQuery(ContactFindManyArgs)
  async findManyContacts(
    @common.Req() request: Request,
    @common.Param() params: PermissionGroupWhereUniqueInput
  ): Promise<Contact[]> {
    const query = plainToClass(ContactFindManyArgs, request.query);
    const results = await this.service.findContacts(params.id, {
      ...query,
      select: {
        birth: true,
        company: true,

        contactId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        firstName: true,
        home: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        lastName: true,
        mobile: true,

        permissionGroupId: {
          select: {
            id: true,
          },
        },

        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/contacts")
  async connectContacts(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/contacts")
  async updateContacts(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/contacts")
  async disconnectContacts(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileData")
  @ApiNestedQuery(FileDatumFindManyArgs)
  async findManyFileData(
    @common.Req() request: Request,
    @common.Param() params: PermissionGroupWhereUniqueInput
  ): Promise<FileDatum[]> {
    const query = plainToClass(FileDatumFindManyArgs, request.query);
    const results = await this.service.findFileData(params.id, {
      ...query,
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileData")
  async connectFileData(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileData")
  async updateFileData(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileData")
  async disconnectFileData(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/permissionGroupNames")
  @ApiNestedQuery(PermissionGroupNameFindManyArgs)
  async findManyPermissionGroupNames(
    @common.Req() request: Request,
    @common.Param() params: PermissionGroupWhereUniqueInput
  ): Promise<PermissionGroupName[]> {
    const query = plainToClass(PermissionGroupNameFindManyArgs, request.query);
    const results = await this.service.findPermissionGroupNames(params.id, {
      ...query,
      select: {
        createdAt: true,
        groupName: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        permissionGroupId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/permissionGroupNames")
  async connectPermissionGroupNames(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/permissionGroupNames")
  async updatePermissionGroupNames(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/permissionGroupNames")
  async disconnectPermissionGroupNames(
    @common.Param() params: PermissionGroupWhereUniqueInput,
    @common.Body() body: PermissionGroupNameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissionGroupNames: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
