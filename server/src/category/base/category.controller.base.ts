/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoryService } from "../category.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CategoryCreateInput } from "./CategoryCreateInput";
import { CategoryWhereInput } from "./CategoryWhereInput";
import { CategoryWhereUniqueInput } from "./CategoryWhereUniqueInput";
import { CategoryFindManyArgs } from "./CategoryFindManyArgs";
import { CategoryUpdateInput } from "./CategoryUpdateInput";
import { Category } from "./Category";
import { CategoryTemplateFindManyArgs } from "../../categoryTemplate/base/CategoryTemplateFindManyArgs";
import { CategoryTemplate } from "../../categoryTemplate/base/CategoryTemplate";
import { CategoryTemplateWhereUniqueInput } from "../../categoryTemplate/base/CategoryTemplateWhereUniqueInput";
import { FileDatumFindManyArgs } from "../../fileDatum/base/FileDatumFindManyArgs";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { FileDatumWhereUniqueInput } from "../../fileDatum/base/FileDatumWhereUniqueInput";
import { LinkDatumFindManyArgs } from "../../linkDatum/base/LinkDatumFindManyArgs";
import { LinkDatum } from "../../linkDatum/base/LinkDatum";
import { LinkDatumWhereUniqueInput } from "../../linkDatum/base/LinkDatumWhereUniqueInput";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { RequestDatumFindManyArgs } from "../../requestDatum/base/RequestDatumFindManyArgs";
import { RequestDatum } from "../../requestDatum/base/RequestDatum";
import { RequestDatumWhereUniqueInput } from "../../requestDatum/base/RequestDatumWhereUniqueInput";
import { SuggestionDatumFindManyArgs } from "../../suggestionDatum/base/SuggestionDatumFindManyArgs";
import { SuggestionDatum } from "../../suggestionDatum/base/SuggestionDatum";
import { SuggestionDatumWhereUniqueInput } from "../../suggestionDatum/base/SuggestionDatumWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CategoryControllerBase {
  constructor(
    protected readonly service: CategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Category })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: CategoryCreateInput): Promise<Category> {
    return await this.service.create({
      data: data,
      select: {
        categoryName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Category] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(CategoryFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Category[]> {
    const args = plainToClass(CategoryFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        categoryName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        categoryName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() data: CategoryUpdateInput
  ): Promise<Category | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          categoryName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          categoryName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CategoryTemplate",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/categoryTemplates")
  @ApiNestedQuery(CategoryTemplateFindManyArgs)
  async findManyCategoryTemplates(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<CategoryTemplate[]> {
    const query = plainToClass(CategoryTemplateFindManyArgs, request.query);
    const results = await this.service.findCategoryTemplates(params.id, {
      ...query,
      select: {
        categoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        templateId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/categoryTemplates")
  async connectCategoryTemplates(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: CategoryTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryTemplates: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/categoryTemplates")
  async updateCategoryTemplates(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: CategoryTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryTemplates: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/categoryTemplates")
  async disconnectCategoryTemplates(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: CategoryTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryTemplates: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileData")
  @ApiNestedQuery(FileDatumFindManyArgs)
  async findManyFileData(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<FileDatum[]> {
    const query = plainToClass(FileDatumFindManyArgs, request.query);
    const results = await this.service.findFileData(params.id, {
      ...query,
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileData")
  async connectFileData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileData")
  async updateFileData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileData")
  async disconnectFileData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "LinkDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/linkData")
  @ApiNestedQuery(LinkDatumFindManyArgs)
  async findManyLinkData(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<LinkDatum[]> {
    const query = plainToClass(LinkDatumFindManyArgs, request.query);
    const results = await this.service.findLinkData(params.id, {
      ...query,
      select: {
        categoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isPublic: true,
        link: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/linkData")
  async connectLinkData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/linkData")
  async updateLinkData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/linkData")
  async disconnectLinkData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profiles")
  @ApiNestedQuery(ProfileFindManyArgs)
  async findManyProfiles(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Profile[]> {
    const query = plainToClass(ProfileFindManyArgs, request.query);
    const results = await this.service.findProfiles(params.id, {
      ...query,
      select: {
        backgroundImage: true,

        categoryView: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,

        identityId: {
          select: {
            id: true,
          },
        },

        image: true,
        themeColor: true,
        title: true,
        totalFileWeight: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profiles")
  async connectProfiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profiles")
  async updateProfiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profiles")
  async disconnectProfiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/requestData")
  @ApiNestedQuery(RequestDatumFindManyArgs)
  async findManyRequestData(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<RequestDatum[]> {
    const query = plainToClass(RequestDatumFindManyArgs, request.query);
    const results = await this.service.findRequestData(params.id, {
      ...query,
      select: {
        askId: {
          select: {
            id: true,
          },
        },

        categoryRequestId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        linkId: {
          select: {
            id: true,
          },
        },

        recipientId: {
          select: {
            id: true,
          },
        },

        statusId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/requestData")
  async connectRequestData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/requestData")
  async updateRequestData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/requestData")
  async disconnectRequestData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/suggestionData")
  @ApiNestedQuery(SuggestionDatumFindManyArgs)
  async findManySuggestionData(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<SuggestionDatum[]> {
    const query = plainToClass(SuggestionDatumFindManyArgs, request.query);
    const results = await this.service.findSuggestionData(params.id, {
      ...query,
      select: {
        categorySuggestionId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,

        recipientId: {
          select: {
            id: true,
          },
        },

        statusId: {
          select: {
            id: true,
          },
        },

        suggestionId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/suggestionData")
  async connectSuggestionData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/suggestionData")
  async updateSuggestionData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/suggestionData")
  async disconnectSuggestionData(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SuggestionDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestionData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
