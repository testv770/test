/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNetworkPostArgs } from "./CreateNetworkPostArgs";
import { UpdateNetworkPostArgs } from "./UpdateNetworkPostArgs";
import { DeleteNetworkPostArgs } from "./DeleteNetworkPostArgs";
import { NetworkPostFindManyArgs } from "./NetworkPostFindManyArgs";
import { NetworkPostFindUniqueArgs } from "./NetworkPostFindUniqueArgs";
import { NetworkPost } from "./NetworkPost";
import { User } from "../../user/base/User";
import { NetworkPostService } from "../networkPost.service";

@graphql.Resolver(() => NetworkPost)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class NetworkPostResolverBase {
  constructor(
    protected readonly service: NetworkPostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "read",
    possession: "any",
  })
  async _networkPostsMeta(
    @graphql.Args() args: NetworkPostFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NetworkPost])
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "read",
    possession: "any",
  })
  async networkPosts(
    @graphql.Args() args: NetworkPostFindManyArgs
  ): Promise<NetworkPost[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NetworkPost, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "read",
    possession: "own",
  })
  async networkPost(
    @graphql.Args() args: NetworkPostFindUniqueArgs
  ): Promise<NetworkPost | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NetworkPost)
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "create",
    possession: "any",
  })
  async createNetworkPost(
    @graphql.Args() args: CreateNetworkPostArgs
  ): Promise<NetworkPost> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        identityId: {
          connect: args.data.identityId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NetworkPost)
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "update",
    possession: "any",
  })
  async updateNetworkPost(
    @graphql.Args() args: UpdateNetworkPostArgs
  ): Promise<NetworkPost | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          identityId: {
            connect: args.data.identityId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NetworkPost)
  @nestAccessControl.UseRoles({
    resource: "NetworkPost",
    action: "delete",
    possession: "any",
  })
  async deleteNetworkPost(
    @graphql.Args() args: DeleteNetworkPostArgs
  ): Promise<NetworkPost | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async identityId(
    @graphql.Parent() parent: NetworkPost
  ): Promise<User | null> {
    const result = await this.service.getIdentityId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
