/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFileDatumArgs } from "./CreateFileDatumArgs";
import { UpdateFileDatumArgs } from "./UpdateFileDatumArgs";
import { DeleteFileDatumArgs } from "./DeleteFileDatumArgs";
import { FileDatumFindManyArgs } from "./FileDatumFindManyArgs";
import { FileDatumFindUniqueArgs } from "./FileDatumFindUniqueArgs";
import { FileDatum } from "./FileDatum";
import { FileViewFindManyArgs } from "../../fileView/base/FileViewFindManyArgs";
import { FileView } from "../../fileView/base/FileView";
import { HashtagFileFindManyArgs } from "../../hashtagFile/base/HashtagFileFindManyArgs";
import { HashtagFile } from "../../hashtagFile/base/HashtagFile";
import { RequestDatumFindManyArgs } from "../../requestDatum/base/RequestDatumFindManyArgs";
import { RequestDatum } from "../../requestDatum/base/RequestDatum";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { PermissionGroup } from "../../permissionGroup/base/PermissionGroup";
import { FileDatumService } from "../fileDatum.service";

@graphql.Resolver(() => FileDatum)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FileDatumResolverBase {
  constructor(
    protected readonly service: FileDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async _fileDataMeta(
    @graphql.Args() args: FileDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FileDatum])
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async fileData(
    @graphql.Args() args: FileDatumFindManyArgs
  ): Promise<FileDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FileDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "own",
  })
  async fileDatum(
    @graphql.Args() args: FileDatumFindUniqueArgs
  ): Promise<FileDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileDatum)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "create",
    possession: "any",
  })
  async createFileDatum(
    @graphql.Args() args: CreateFileDatumArgs
  ): Promise<FileDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        cateogyId: args.data.cateogyId
          ? {
              connect: args.data.cateogyId,
            }
          : undefined,

        ownerId: args.data.ownerId
          ? {
              connect: args.data.ownerId,
            }
          : undefined,

        permissionId: args.data.permissionId
          ? {
              connect: args.data.permissionId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FileDatum)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  async updateFileDatum(
    @graphql.Args() args: UpdateFileDatumArgs
  ): Promise<FileDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          cateogyId: args.data.cateogyId
            ? {
                connect: args.data.cateogyId,
              }
            : undefined,

          ownerId: args.data.ownerId
            ? {
                connect: args.data.ownerId,
              }
            : undefined,

          permissionId: args.data.permissionId
            ? {
                connect: args.data.permissionId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileDatum)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "delete",
    possession: "any",
  })
  async deleteFileDatum(
    @graphql.Args() args: DeleteFileDatumArgs
  ): Promise<FileDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FileView])
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  async fileViews(
    @graphql.Parent() parent: FileDatum,
    @graphql.Args() args: FileViewFindManyArgs
  ): Promise<FileView[]> {
    const results = await this.service.findFileViews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HashtagFile])
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "read",
    possession: "any",
  })
  async hashtagFiles(
    @graphql.Parent() parent: FileDatum,
    @graphql.Args() args: HashtagFileFindManyArgs
  ): Promise<HashtagFile[]> {
    const results = await this.service.findHashtagFiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RequestDatum])
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  async requestData(
    @graphql.Parent() parent: FileDatum,
    @graphql.Args() args: RequestDatumFindManyArgs
  ): Promise<RequestDatum[]> {
    const results = await this.service.findRequestData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async cateogyId(
    @graphql.Parent() parent: FileDatum
  ): Promise<Category | null> {
    const result = await this.service.getCateogyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async ownerId(@graphql.Parent() parent: FileDatum): Promise<User | null> {
    const result = await this.service.getOwnerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PermissionGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "read",
    possession: "any",
  })
  async permissionId(
    @graphql.Parent() parent: FileDatum
  ): Promise<PermissionGroup | null> {
    const result = await this.service.getPermissionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
