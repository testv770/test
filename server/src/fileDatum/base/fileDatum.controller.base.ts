/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileDatumService } from "../fileDatum.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FileDatumCreateInput } from "./FileDatumCreateInput";
import { FileDatumWhereInput } from "./FileDatumWhereInput";
import { FileDatumWhereUniqueInput } from "./FileDatumWhereUniqueInput";
import { FileDatumFindManyArgs } from "./FileDatumFindManyArgs";
import { FileDatumUpdateInput } from "./FileDatumUpdateInput";
import { FileDatum } from "./FileDatum";
import { FileViewFindManyArgs } from "../../fileView/base/FileViewFindManyArgs";
import { FileView } from "../../fileView/base/FileView";
import { FileViewWhereUniqueInput } from "../../fileView/base/FileViewWhereUniqueInput";
import { HashtagFileFindManyArgs } from "../../hashtagFile/base/HashtagFileFindManyArgs";
import { HashtagFile } from "../../hashtagFile/base/HashtagFile";
import { HashtagFileWhereUniqueInput } from "../../hashtagFile/base/HashtagFileWhereUniqueInput";
import { RequestDatumFindManyArgs } from "../../requestDatum/base/RequestDatumFindManyArgs";
import { RequestDatum } from "../../requestDatum/base/RequestDatum";
import { RequestDatumWhereUniqueInput } from "../../requestDatum/base/RequestDatumWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FileDatumControllerBase {
  constructor(
    protected readonly service: FileDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileDatum })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: FileDatumCreateInput): Promise<FileDatum> {
    return await this.service.create({
      data: {
        ...data,

        cateogyId: data.cateogyId
          ? {
              connect: data.cateogyId,
            }
          : undefined,

        ownerId: data.ownerId
          ? {
              connect: data.ownerId,
            }
          : undefined,

        permissionId: data.permissionId
          ? {
              connect: data.permissionId,
            }
          : undefined,
      },
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [FileDatum] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(FileDatumFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<FileDatum[]> {
    const args = plainToClass(FileDatumFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: FileDatumWhereUniqueInput
  ): Promise<FileDatum | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        cateogyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deleted: true,
        file: true,
        fileType: true,
        id: true,
        isFile: true,
        isGallery: true,
        isPublic: true,

        ownerId: {
          select: {
            id: true,
          },
        },

        permissionId: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() data: FileDatumUpdateInput
  ): Promise<FileDatum | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          cateogyId: data.cateogyId
            ? {
                connect: data.cateogyId,
              }
            : undefined,

          ownerId: data.ownerId
            ? {
                connect: data.ownerId,
              }
            : undefined,

          permissionId: data.permissionId
            ? {
                connect: data.permissionId,
              }
            : undefined,
        },
        select: {
          cateogyId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deleted: true,
          file: true,
          fileType: true,
          id: true,
          isFile: true,
          isGallery: true,
          isPublic: true,

          ownerId: {
            select: {
              id: true,
            },
          },

          permissionId: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: FileDatumWhereUniqueInput
  ): Promise<FileDatum | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          cateogyId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deleted: true,
          file: true,
          fileType: true,
          id: true,
          isFile: true,
          isGallery: true,
          isPublic: true,

          ownerId: {
            select: {
              id: true,
            },
          },

          permissionId: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FileView",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileViews")
  @ApiNestedQuery(FileViewFindManyArgs)
  async findManyFileViews(
    @common.Req() request: Request,
    @common.Param() params: FileDatumWhereUniqueInput
  ): Promise<FileView[]> {
    const query = plainToClass(FileViewFindManyArgs, request.query);
    const results = await this.service.findFileViews(params.id, {
      ...query,
      select: {
        createdAt: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        identity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        watchId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileViews")
  async connectFileViews(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileViews")
  async updateFileViews(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileViews")
  async disconnectFileViews(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: FileViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileViews: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/hashtagFiles")
  @ApiNestedQuery(HashtagFileFindManyArgs)
  async findManyHashtagFiles(
    @common.Req() request: Request,
    @common.Param() params: FileDatumWhereUniqueInput
  ): Promise<HashtagFile[]> {
    const query = plainToClass(HashtagFileFindManyArgs, request.query);
    const results = await this.service.findHashtagFiles(params.id, {
      ...query,
      select: {
        createdAt: true,

        fileId: {
          select: {
            id: true,
          },
        },

        hashtagId: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/hashtagFiles")
  async connectHashtagFiles(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: HashtagFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtagFiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/hashtagFiles")
  async updateHashtagFiles(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: HashtagFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtagFiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/hashtagFiles")
  async disconnectHashtagFiles(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: HashtagFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hashtagFiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "RequestDatum",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/requestData")
  @ApiNestedQuery(RequestDatumFindManyArgs)
  async findManyRequestData(
    @common.Req() request: Request,
    @common.Param() params: FileDatumWhereUniqueInput
  ): Promise<RequestDatum[]> {
    const query = plainToClass(RequestDatumFindManyArgs, request.query);
    const results = await this.service.findRequestData(params.id, {
      ...query,
      select: {
        askId: {
          select: {
            id: true,
          },
        },

        categoryRequestId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,

        fileId: {
          select: {
            id: true,
          },
        },

        id: true,

        linkId: {
          select: {
            id: true,
          },
        },

        recipientId: {
          select: {
            id: true,
          },
        },

        statusId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/requestData")
  async connectRequestData(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/requestData")
  async updateRequestData(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/requestData")
  async disconnectRequestData(
    @common.Param() params: FileDatumWhereUniqueInput,
    @common.Body() body: RequestDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestData: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
