/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserFcmArgs } from "./CreateUserFcmArgs";
import { UpdateUserFcmArgs } from "./UpdateUserFcmArgs";
import { DeleteUserFcmArgs } from "./DeleteUserFcmArgs";
import { UserFcmFindManyArgs } from "./UserFcmFindManyArgs";
import { UserFcmFindUniqueArgs } from "./UserFcmFindUniqueArgs";
import { UserFcm } from "./UserFcm";
import { User } from "../../user/base/User";
import { UserFcmService } from "../userFcm.service";

@graphql.Resolver(() => UserFcm)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserFcmResolverBase {
  constructor(
    protected readonly service: UserFcmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "read",
    possession: "any",
  })
  async _userFcmsMeta(
    @graphql.Args() args: UserFcmFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserFcm])
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "read",
    possession: "any",
  })
  async userFcms(
    @graphql.Args() args: UserFcmFindManyArgs
  ): Promise<UserFcm[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserFcm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "read",
    possession: "own",
  })
  async userFcm(
    @graphql.Args() args: UserFcmFindUniqueArgs
  ): Promise<UserFcm | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFcm)
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "create",
    possession: "any",
  })
  async createUserFcm(
    @graphql.Args() args: CreateUserFcmArgs
  ): Promise<UserFcm> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFcm)
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "update",
    possession: "any",
  })
  async updateUserFcm(
    @graphql.Args() args: UpdateUserFcmArgs
  ): Promise<UserFcm | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFcm)
  @nestAccessControl.UseRoles({
    resource: "UserFcm",
    action: "delete",
    possession: "any",
  })
  async deleteUserFcm(
    @graphql.Args() args: DeleteUserFcmArgs
  ): Promise<UserFcm | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: UserFcm): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
