/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePermissionGroupNameArgs } from "./CreatePermissionGroupNameArgs";
import { UpdatePermissionGroupNameArgs } from "./UpdatePermissionGroupNameArgs";
import { DeletePermissionGroupNameArgs } from "./DeletePermissionGroupNameArgs";
import { PermissionGroupNameFindManyArgs } from "./PermissionGroupNameFindManyArgs";
import { PermissionGroupNameFindUniqueArgs } from "./PermissionGroupNameFindUniqueArgs";
import { PermissionGroupName } from "./PermissionGroupName";
import { User } from "../../user/base/User";
import { PermissionGroup } from "../../permissionGroup/base/PermissionGroup";
import { PermissionGroupNameService } from "../permissionGroupName.service";

@graphql.Resolver(() => PermissionGroupName)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PermissionGroupNameResolverBase {
  constructor(
    protected readonly service: PermissionGroupNameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "any",
  })
  async _permissionGroupNamesMeta(
    @graphql.Args() args: PermissionGroupNameFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PermissionGroupName])
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "any",
  })
  async permissionGroupNames(
    @graphql.Args() args: PermissionGroupNameFindManyArgs
  ): Promise<PermissionGroupName[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PermissionGroupName, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "read",
    possession: "own",
  })
  async permissionGroupName(
    @graphql.Args() args: PermissionGroupNameFindUniqueArgs
  ): Promise<PermissionGroupName | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PermissionGroupName)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "create",
    possession: "any",
  })
  async createPermissionGroupName(
    @graphql.Args() args: CreatePermissionGroupNameArgs
  ): Promise<PermissionGroupName> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        identityId: args.data.identityId
          ? {
              connect: args.data.identityId,
            }
          : undefined,

        permissionGroupId: args.data.permissionGroupId
          ? {
              connect: args.data.permissionGroupId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PermissionGroupName)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "update",
    possession: "any",
  })
  async updatePermissionGroupName(
    @graphql.Args() args: UpdatePermissionGroupNameArgs
  ): Promise<PermissionGroupName | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          identityId: args.data.identityId
            ? {
                connect: args.data.identityId,
              }
            : undefined,

          permissionGroupId: args.data.permissionGroupId
            ? {
                connect: args.data.permissionGroupId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PermissionGroupName)
  @nestAccessControl.UseRoles({
    resource: "PermissionGroupName",
    action: "delete",
    possession: "any",
  })
  async deletePermissionGroupName(
    @graphql.Args() args: DeletePermissionGroupNameArgs
  ): Promise<PermissionGroupName | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async identityId(
    @graphql.Parent() parent: PermissionGroupName
  ): Promise<User | null> {
    const result = await this.service.getIdentityId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PermissionGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PermissionGroup",
    action: "read",
    possession: "any",
  })
  async permissionGroupId(
    @graphql.Parent() parent: PermissionGroupName
  ): Promise<PermissionGroup | null> {
    const result = await this.service.getPermissionGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
