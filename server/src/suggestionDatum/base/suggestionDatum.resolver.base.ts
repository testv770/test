/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSuggestionDatumArgs } from "./CreateSuggestionDatumArgs";
import { UpdateSuggestionDatumArgs } from "./UpdateSuggestionDatumArgs";
import { DeleteSuggestionDatumArgs } from "./DeleteSuggestionDatumArgs";
import { SuggestionDatumFindManyArgs } from "./SuggestionDatumFindManyArgs";
import { SuggestionDatumFindUniqueArgs } from "./SuggestionDatumFindUniqueArgs";
import { SuggestionDatum } from "./SuggestionDatum";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { EnumSuggestionDatum } from "../../enumSuggestionDatum/base/EnumSuggestionDatum";
import { SuggestionDatumService } from "../suggestionDatum.service";

@graphql.Resolver(() => SuggestionDatum)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SuggestionDatumResolverBase {
  constructor(
    protected readonly service: SuggestionDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  async _suggestionDataMeta(
    @graphql.Args() args: SuggestionDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SuggestionDatum])
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  async suggestionData(
    @graphql.Args() args: SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SuggestionDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "own",
  })
  async suggestionDatum(
    @graphql.Args() args: SuggestionDatumFindUniqueArgs
  ): Promise<SuggestionDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "create",
    possession: "any",
  })
  async createSuggestionDatum(
    @graphql.Args() args: CreateSuggestionDatumArgs
  ): Promise<SuggestionDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        categorySuggestionId: args.data.categorySuggestionId
          ? {
              connect: args.data.categorySuggestionId,
            }
          : undefined,

        recipientId: args.data.recipientId
          ? {
              connect: args.data.recipientId,
            }
          : undefined,

        statusId: args.data.statusId
          ? {
              connect: args.data.statusId,
            }
          : undefined,

        suggestionId: args.data.suggestionId
          ? {
              connect: args.data.suggestionId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "update",
    possession: "any",
  })
  async updateSuggestionDatum(
    @graphql.Args() args: UpdateSuggestionDatumArgs
  ): Promise<SuggestionDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          categorySuggestionId: args.data.categorySuggestionId
            ? {
                connect: args.data.categorySuggestionId,
              }
            : undefined,

          recipientId: args.data.recipientId
            ? {
                connect: args.data.recipientId,
              }
            : undefined,

          statusId: args.data.statusId
            ? {
                connect: args.data.statusId,
              }
            : undefined,

          suggestionId: args.data.suggestionId
            ? {
                connect: args.data.suggestionId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "delete",
    possession: "any",
  })
  async deleteSuggestionDatum(
    @graphql.Args() args: DeleteSuggestionDatumArgs
  ): Promise<SuggestionDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async categorySuggestionId(
    @graphql.Parent() parent: SuggestionDatum
  ): Promise<Category | null> {
    const result = await this.service.getCategorySuggestionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async recipientId(
    @graphql.Parent() parent: SuggestionDatum
  ): Promise<User | null> {
    const result = await this.service.getRecipientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EnumSuggestionDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "read",
    possession: "any",
  })
  async statusId(
    @graphql.Parent() parent: SuggestionDatum
  ): Promise<EnumSuggestionDatum | null> {
    const result = await this.service.getStatusId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async suggestionId(
    @graphql.Parent() parent: SuggestionDatum
  ): Promise<User | null> {
    const result = await this.service.getSuggestionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
