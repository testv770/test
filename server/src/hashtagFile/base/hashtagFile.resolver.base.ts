/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHashtagFileArgs } from "./CreateHashtagFileArgs";
import { UpdateHashtagFileArgs } from "./UpdateHashtagFileArgs";
import { DeleteHashtagFileArgs } from "./DeleteHashtagFileArgs";
import { HashtagFileFindManyArgs } from "./HashtagFileFindManyArgs";
import { HashtagFileFindUniqueArgs } from "./HashtagFileFindUniqueArgs";
import { HashtagFile } from "./HashtagFile";
import { FileDatum } from "../../fileDatum/base/FileDatum";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { HashtagFileService } from "../hashtagFile.service";

@graphql.Resolver(() => HashtagFile)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HashtagFileResolverBase {
  constructor(
    protected readonly service: HashtagFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "read",
    possession: "any",
  })
  async _hashtagFilesMeta(
    @graphql.Args() args: HashtagFileFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HashtagFile])
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "read",
    possession: "any",
  })
  async hashtagFiles(
    @graphql.Args() args: HashtagFileFindManyArgs
  ): Promise<HashtagFile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HashtagFile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "read",
    possession: "own",
  })
  async hashtagFile(
    @graphql.Args() args: HashtagFileFindUniqueArgs
  ): Promise<HashtagFile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HashtagFile)
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "create",
    possession: "any",
  })
  async createHashtagFile(
    @graphql.Args() args: CreateHashtagFileArgs
  ): Promise<HashtagFile> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        fileId: args.data.fileId
          ? {
              connect: args.data.fileId,
            }
          : undefined,

        hashtagId: args.data.hashtagId
          ? {
              connect: args.data.hashtagId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HashtagFile)
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "update",
    possession: "any",
  })
  async updateHashtagFile(
    @graphql.Args() args: UpdateHashtagFileArgs
  ): Promise<HashtagFile | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          fileId: args.data.fileId
            ? {
                connect: args.data.fileId,
              }
            : undefined,

          hashtagId: args.data.hashtagId
            ? {
                connect: args.data.hashtagId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HashtagFile)
  @nestAccessControl.UseRoles({
    resource: "HashtagFile",
    action: "delete",
    possession: "any",
  })
  async deleteHashtagFile(
    @graphql.Args() args: DeleteHashtagFileArgs
  ): Promise<HashtagFile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FileDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FileDatum",
    action: "read",
    possession: "any",
  })
  async fileId(
    @graphql.Parent() parent: HashtagFile
  ): Promise<FileDatum | null> {
    const result = await this.service.getFileId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async hashtagId(
    @graphql.Parent() parent: HashtagFile
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtagId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
