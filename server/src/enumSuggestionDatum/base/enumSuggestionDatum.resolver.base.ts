/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEnumSuggestionDatumArgs } from "./CreateEnumSuggestionDatumArgs";
import { UpdateEnumSuggestionDatumArgs } from "./UpdateEnumSuggestionDatumArgs";
import { DeleteEnumSuggestionDatumArgs } from "./DeleteEnumSuggestionDatumArgs";
import { EnumSuggestionDatumFindManyArgs } from "./EnumSuggestionDatumFindManyArgs";
import { EnumSuggestionDatumFindUniqueArgs } from "./EnumSuggestionDatumFindUniqueArgs";
import { EnumSuggestionDatum } from "./EnumSuggestionDatum";
import { SuggestionDatumFindManyArgs } from "../../suggestionDatum/base/SuggestionDatumFindManyArgs";
import { SuggestionDatum } from "../../suggestionDatum/base/SuggestionDatum";
import { EnumSuggestionDatumService } from "../enumSuggestionDatum.service";

@graphql.Resolver(() => EnumSuggestionDatum)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EnumSuggestionDatumResolverBase {
  constructor(
    protected readonly service: EnumSuggestionDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "read",
    possession: "any",
  })
  async _enumSuggestionDataMeta(
    @graphql.Args() args: EnumSuggestionDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EnumSuggestionDatum])
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "read",
    possession: "any",
  })
  async enumSuggestionData(
    @graphql.Args() args: EnumSuggestionDatumFindManyArgs
  ): Promise<EnumSuggestionDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EnumSuggestionDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "read",
    possession: "own",
  })
  async enumSuggestionDatum(
    @graphql.Args() args: EnumSuggestionDatumFindUniqueArgs
  ): Promise<EnumSuggestionDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumSuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "create",
    possession: "any",
  })
  async createEnumSuggestionDatum(
    @graphql.Args() args: CreateEnumSuggestionDatumArgs
  ): Promise<EnumSuggestionDatum> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnumSuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "update",
    possession: "any",
  })
  async updateEnumSuggestionDatum(
    @graphql.Args() args: UpdateEnumSuggestionDatumArgs
  ): Promise<EnumSuggestionDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EnumSuggestionDatum)
  @nestAccessControl.UseRoles({
    resource: "EnumSuggestionDatum",
    action: "delete",
    possession: "any",
  })
  async deleteEnumSuggestionDatum(
    @graphql.Args() args: DeleteEnumSuggestionDatumArgs
  ): Promise<EnumSuggestionDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SuggestionDatum])
  @nestAccessControl.UseRoles({
    resource: "SuggestionDatum",
    action: "read",
    possession: "any",
  })
  async suggestionData(
    @graphql.Parent() parent: EnumSuggestionDatum,
    @graphql.Args() args: SuggestionDatumFindManyArgs
  ): Promise<SuggestionDatum[]> {
    const results = await this.service.findSuggestionData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
